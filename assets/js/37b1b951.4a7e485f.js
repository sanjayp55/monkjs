"use strict";(self.webpackChunkmonk_website=self.webpackChunkmonk_website||[]).push([[732],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||s;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=d;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var l=2;l<s;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2351:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>r,contentTitle:()=>c,metadata:()=>l,toc:()=>p,default:()=>d});var a=t(7462),o=t(3366),s=(t(7294),t(3905)),i=["components"],r={id:"picturing",title:"\ud83d\udcf7 Taking pictures",slug:"/js/guides/picturing"},c=void 0,l={unversionedId:"js/guides/picturing",id:"js/guides/picturing",title:"\ud83d\udcf7 Taking pictures",description:"Our guide will help you implement a Camera module in your React application, web or native.",source:"@site/docs/js/guides/picturing.md",sourceDirName:"js/guides",slug:"/js/guides/picturing",permalink:"/monkjs/docs/js/guides/picturing",tags:[],version:"current",frontMatter:{id:"picturing",title:"\ud83d\udcf7 Taking pictures",slug:"/js/guides/picturing"},sidebar:"docsSidebar",previous:{title:"\ud83d\udd13 Authenticating",permalink:"/monkjs/docs/js/guides/authenticating"},next:{title:"\ud83d\udce8 Requesting data",permalink:"/monkjs/docs/js/guides/requesting"}},p=[{value:"Principles",id:"principles",children:[{value:"Native",id:"native",children:[],level:3},{value:"Browser",id:"browser",children:[],level:3},{value:"What should I choose ?",id:"what-should-i-choose-",children:[],level:3}],level:2},{value:"Examples",id:"examples",children:[{value:"Get an inspection first",id:"get-an-inspection-first",children:[],level:3},{value:"Define controls and callbacks",id:"define-controls-and-callbacks",children:[],level:3},{value:"Render the <code>&lt;Capture /&gt;</code> component",id:"render-the-capture--component",children:[],level:3},{value:"Start the damage detection task",id:"start-the-damage-detection-task",children:[],level:3},{value:"Full example",id:"full-example",children:[],level:3}],level:2},{value:"What&#39;s next?",id:"whats-next",children:[],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Our guide will help you implement a Camera module in your React application, web or native."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://img.shields.io/npm/v/@monkvision/camera/latest.svg",alt:"npm latest package"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yarn"},"yarn add @monkvision/corejs @monkvision/sights @monkvision/toolkit @monkvision/camera\n")),(0,s.kt)("h2",{id:"principles"},"Principles"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@monkvision/camera")," module is base of ",(0,s.kt)("inlineCode",{parentName:"p"},"expo-camera")," where we added features to enhance\npicture quality and compliance."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"We made specific sights & overlays in order to improve\nAI performance. ",(0,s.kt)("strong",{parentName:"p"},"To make it simple, it's a camera module tailored for vehicle inspections."))),(0,s.kt)("h3",{id:"native"},"Native"),(0,s.kt)("p",null,"In native, we have access to the OS API via the React Native bridge.\nThe constraints are only the one set by the operating system (Android, iOS)."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.expo.dev/versions/latest/sdk/camera/"},"More details on Expo documentation")),(0,s.kt)("h3",{id:"browser"},"Browser"),(0,s.kt)("p",null,"In the browser, we use the UserMedia API provided by the browser.\nQuality isn't limited at all, but performance or compatibility can be\nsince we use another layer between us and the machine."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.expo.dev/versions/latest/sdk/camera/"},"More details on Expo documentation")),(0,s.kt)("h3",{id:"what-should-i-choose-"},"What should I choose ?"),(0,s.kt)("p",null,"Our module works in both environment. Choose what is easier to implement for now\nin your current project application."),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"You can follow this steps by steps tutorial\nor go directly to the ",(0,s.kt)("a",{parentName:"p",href:"#full-example"},"full example"),"\non how taking picture with the ",(0,s.kt)("inlineCode",{parentName:"p"},"<Capture />")," component."),(0,s.kt)("h3",{id:"get-an-inspection-first"},"Get an inspection first"),(0,s.kt)("p",null,"You can use your own routing system or directly create on new inspection.\nThe must important is to have ",(0,s.kt)("strong",{parentName:"p"},"a valid")," ",(0,s.kt)("inlineCode",{parentName:"p"},"inspectionId"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/* Inspector.jsx */\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport monk from '@monkvision/corejs';\nimport isEmpty from 'lodash.isempty';\n\nimport { Loader } from '@monkvision/ui';\n\nexport default () => {\n  const route = useRoute();\n  // Use a loading state to have better control over your components.\n  const [loading, setLoading] = useState();\n\n  // Here we're getting an inspectionId from a route param.\n  const [inspectionId, setInspectionId] = useState(route.params.inspectionId);\n\n  // But we set a callback to create a new Inspection if the id is empty\n  // @see https://monkvision.github.io/monkjs/docs/js/api/inspection#createone\n  const createNewInspection = useCallback(async () => {\n    if (isEmpty(inspectionId)) {\n      const tasks = { [task.NAMES.damageDetection]: { status: task.STATUSES.notStarted } };\n      const data = { tasks };\n\n      const { result } = await monk.entity.inspection.createOne(data);\n      setInspectionId(result);\n    }\n  }, [inspectionId]);\n\n  useEffect(() => {\n    createNewInspection();\n  }, [createNewInspection]);\n\n  // Showing the `<Loader />` when the inspection\n  // hasn't been created yet.\n  if (isEmpty(inspectionId) && loading) {\n    return (\n      <Loader texts={[\n        'Creating inspection...',\n        'Requesting a new ID...',\n        'Getting started...',\n        'Calling servers...',\n      ]}\n      />\n    );\n  }\n\n  return (\n    <View>\n      <Text>\n        Inspection:\n        {inspectionId}\n      </Text>\n    </View>\n  );\n};\n")),(0,s.kt)("h3",{id:"define-controls-and-callbacks"},"Define controls and callbacks"),(0,s.kt)("p",null,"We now need a button and a callback to capture an image."),(0,s.kt)("p",null,"Define first the async ",(0,s.kt)("inlineCode",{parentName:"p"},"handleCapture(state, api, event)")," callback."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const handleCapture = useCallback(async (state, api, event) => {\n  event.preventDefault();\n  setLoading(true);\n\n  // @see https://monkvision.github.io/monkjs/docs/js/api/components/capture#state\n  const {\n    takePictureAsync,\n    startUploadAsync,\n    setPictureAsync,\n    goNextSight,\n    checkComplianceAsync,\n  } = api;\n\n  // We await the picture to be taken by Native camera or Web getUserMedia()\n  const picture = await takePictureAsync();\n\n  // After a raw picture being taken in full resolution\n  // We asynchronously create a low res thumbnail\n  // to display in the interface.\n  setPictureAsync(picture);\n\n  // @see https://monkvision.github.io/monkjs/docs/js/api/components/capture#states\n  const { sights } = state;\n  const { current, ids } = sights.state;\n\n  // Last index means the end of the tour,\n  // if we are not allowed to skip or navigate\n  // between sights.\n  // @see https://monkvision.github.io/monkjs/docs/js/api/components/capture#navigationoptions\n  const lastIndex = current.index === ids.length - 1;\n\n  // If this is not the end,\n  // we don't wait upload to start or stop,\n  // and we go directly to the next sight\n  if (!lastIndex) {\n    setLoading(false);\n    goNextSight();\n  }\n\n  // We start the upload and we await the result.\n  // If the upload went well, we check the quality\n  // and the compliance of the picture.\n  const upload = await startUploadAsync(picture);\n  const uploadId = upload.data?.id;\n  if (uploadId) { await checkComplianceAsync(uploadId); }\n\n  // Now we took the last picture of the list.\n  if (lastIndex) {\n    setLoading(false);\n    // Do something here at the end\n    // or use the renderOnFinish `<Capture />` prop.\n  }\n}, []);\n")),(0,s.kt)("p",null,"Then create a control button with our freshly defined callback."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Controls } from '@monkvision/camera';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const controls = [{\n  disabled: loading,\n  onPress: handleCapture,\n  ...Controls.CaptureButtonProps,\n}];\n")),(0,s.kt)("h3",{id:"render-the-capture--component"},"Render the ",(0,s.kt)("inlineCode",{parentName:"h3"},"<Capture />")," component"),(0,s.kt)("p",null,"Now we have everything to take picture except the rendering component."),(0,s.kt)("p",null,"First import it from ",(0,s.kt)("inlineCode",{parentName:"p"},"@monkvision/camera"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Capture, Controls } from '@monkvision/camera';\n")),(0,s.kt)("p",null,"Then make it the returned Element of your ",(0,s.kt)("em",{parentName:"p"},"Inspector")," function component."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"return (\n  <Capture\n    inspectionId={inspectionId}\n    controls={controls}\n    loading={loading}\n  />\n);\n")),(0,s.kt)("h3",{id:"start-the-damage-detection-task"},"Start the damage detection task"),(0,s.kt)("p",null,"Now that we can get pictures, we want to treat them before starting a task."),(0,s.kt)("p",null,"Using the ",(0,s.kt)("inlineCode",{parentName:"p"},"UploadCenter")," component is the best way to see statuses\nand to be able to retake low quality pictures."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Capture, Controls, UploadCenter } from '@monkvision/camera';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"return (\n  <Capture\n    inspectionId={inspectionId}\n    controls={controls}\n    loading={loading}\n    renderOnFinish={UploadCenter}\n  />\n);\n")),(0,s.kt)("p",null,"Combined with the ",(0,s.kt)("inlineCode",{parentName:"p"},"submitButtonProps")," prop,\nyou can control validation and do whatever you want\nas going success with the Capture workflow."),(0,s.kt)("p",null,"We define another async callback called ",(0,s.kt)("inlineCode",{parentName:"p"},"handleSuccess()"),"\nto start a damage detection task whe the user press the submit button."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const handleSuccess = useCallback(async () => {\n  setLoading(true);\n\n  const name = task.NAMES.damageDetection;\n  const data = { status: task.STATUSES.todo };\n\n  // Here we use the corejs API to update one task of an inspection.\n  // @see https://monkvision.github.io/monkjs/docs/js/api/task#updateone\n  await monk.entity.task.updateOne({ inspectionId, name, data });\n\n  setLoading(false);\n}, [inspectionId]);\n")),(0,s.kt)("p",null,"Then we set the ",(0,s.kt)("inlineCode",{parentName:"p"},"submitButtonProps")," to the ",(0,s.kt)("inlineCode",{parentName:"p"},"<Capture />")," component."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"<Capture\n  inspectionId={inspectionId}\n  controls={controls}\n  loading={loading}\n  renderOnFinish={UploadCenter}\n  submitButtonProps={{\n    title: 'Submit',\n    disabled: loading,\n    onPress: handleSuccess,\n  }}\n/>\n")),(0,s.kt)("p",null,"Now we are done! You are able to take picture and send them for analysis."),(0,s.kt)("h3",{id:"full-example"},"Full example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/* Inspector.jsx */\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport isEmpty from 'lodash.isempty';\n\nimport monk from '@monkvision/corejs';\nimport { Loader } from '@monkvision/ui';\nimport { Capture, Controls, UploadCenter } from '@monkvision/camera';\n\nexport default () => {\n  const route = useRoute();\n  // Use a loading state to have better control over your components.\n  const [loading, setLoading] = useState();\n\n  // Here we're getting an inspectionId from a route param.\n  const [inspectionId, setInspectionId] = useState(route.params.inspectionId);\n\n  // But we set a callback to create a new Inspection if the id is empty\n  // @see https://monkvision.github.io/monkjs/docs/js/api/inspection#createone\n  const createNewInspection = useCallback(async () => {\n    if (isEmpty(inspectionId)) {\n      const tasks = { [task.NAMES.damageDetection]: { status: task.STATUSES.notStarted } };\n      const data = { tasks };\n\n      const { result } = await monk.entity.inspection.createOne(data);\n      setInspectionId(result);\n    }\n  }, [inspectionId]);\n\n  // We set a callback that will be triggered when users will submit their pictures.\n  const handleSuccess = useCallback(async () => {\n    setLoading(true);\n\n    const name = task.NAMES.damageDetection;\n    const data = { status: task.STATUSES.todo };\n\n    // Here we use the corejs API to update one task of an inspection.\n    // @see https://monkvision.github.io/monkjs/docs/js/api/task#updateone\n    await monk.entity.task.updateOne(inspectionId, name, data);\n\n    setLoading(false);\n  }, [inspectionId]);\n\n  // We set another callback being triggered\n  // when users are pushing the \"Take picture\" control button.\n  // Param `event` comes from the Button Element.\n  // Params `state` & `api` come from the Capture component.\n  const handleCapture = useCallback(async (state, api, event) => {\n    event.preventDefault();\n    setLoading(true);\n\n    // @see https://monkvision.github.io/monkjs/docs/js/api/components/capture#state\n    const {\n      takePictureAsync,\n      startUploadAsync,\n      setPictureAsync,\n      goNextSight,\n      checkComplianceAsync,\n    } = api;\n\n    // We await the picture to be taken by Native camera or Web getUserMedia()\n    const picture = await takePictureAsync();\n\n    // After a raw picture being taken in full resolution\n    // We asynchronously create a low res thumbnail\n    // to display in the interface.\n    setPictureAsync(picture);\n\n    // @see https://monkvision.github.io/monkjs/docs/js/api/components/capture#states\n    const { sights } = state;\n    const { current, ids } = sights.state;\n\n    // Last index means the end of the tour,\n    // if we are not allowed to skip or navigate\n    // between sights.\n    // @see https://monkvision.github.io/monkjs/docs/js/api/components/capture#navigationoptions\n    const lastIndex = current.index === ids.length - 1;\n\n    // If this is not the end,\n    // we don't wait upload to start or stop,\n    // and we go directly to the next sight\n    if (!lastIndex) {\n      setLoading(false);\n      goNextSight();\n    }\n\n    // We start the upload and we await the result.\n    // If the upload went well, we check the quality\n    // and the compliance of the picture.\n    const upload = await startUploadAsync(picture);\n    /** --- With picture quality check ---\n      if (upload.data?.id) { await checkComplianceAsync(upload.data.id); }\n     */\n\n    // Now we took the last picture of the list.\n    if (lastIndex) {\n      setLoading(false);\n      // Do something here at the end\n      // or use the renderOnFinish `<Capture />` prop.\n    }\n  }, []);\n\n  const uploads = useUploads({ sightIds: Constants.defaultSightIds });\n\n  // We define one Control button,\n  // and we spread `Controls.CaptureButtonProps` to it.\n  // Controls are displayed on the right of the screen.\n  const controls = [{\n    disabled: loading,\n    onPress: handleCapture,\n    ...Controls.CaptureButtonProps,\n  }];\n\n  useEffect(() => {\n    createNewInspection();\n  }, [createNewInspection]);\n\n  // Showing the `<Loader />` when the inspection\n  // hasn't been created yet.\n  if (isEmpty(inspectionId) && loading) {\n    return (\n      <Loader texts={[\n        'Creating inspection...',\n        'Requesting a new ID...',\n        'Getting started...',\n        'Calling servers...',\n      ]}\n      />\n    );\n  }\n\n  // Here we render the `<Capture />` component.\n  return (\n    <SafeAreaView>\n      <StatusBar hidden />\n       <Capture\n        sightIds={Constants.defaultSightIds}\n        inspectionId={inspectionId}\n        controls={controls}\n        uploads={uploads}\n        loading={loading}\n        onReady={() => setLoading(false)}\n        onCaptureTourStart={() => console.log('Capture tour process has finished')}\n\n        /** --- With picture quality check\n         * enableComplianceCheck={true}\n         * onComplianceCheckFinish={() => console.log('Picture quality check process has finished')}\n         */\n      />\n    </SafeAreaView>\n  );\n}\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"See the ",(0,s.kt)("a",{parentName:"strong",href:"/docs/js/api/components/capture"},"Capture API")," to more details.")),(0,s.kt)("h2",{id:"whats-next"},"What's next?"),(0,s.kt)("p",null,"You will see how to perform any request on the Monk Core API and also\nhow to manage a fully normalize state for your application."))}d.isMDXComponent=!0}}]);